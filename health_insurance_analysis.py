# -*- coding: utf-8 -*-
"""Health_Insurance_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sSiIS8z1fWx854jkbB9vYYm7urBDfiQN
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('drive/MyDrive/insurance.csv')

print("Summary Statistics:")
print(data.describe())

sns.set(style="whitegrid")

fig, axes = plt.subplots(2, 2, figsize=(14, 10), constrained_layout=True)

sns.histplot(data=data, x='age', kde=True, ax=axes[0, 0])
axes[0, 0].set_title("Age Distribution")

sns.histplot(data=data, x='bmi', kde=True, ax=axes[0, 1])
axes[0, 1].set_title("BMI Distribution")

sns.histplot(data=data, x='children', discrete=True, kde=False, ax=axes[1, 0])
axes[1, 0].set_title("Children Distribution")

sns.histplot(data=data, x='charges', kde=True, ax=axes[1, 1])
axes[1, 1].set_title("Charges Distribution")

plt.show()

plt.figure(figsize=(8, 6))
correlation_matrix = data.corr(numeric_only=True)
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
X = data.drop('charges', axis=1)
y = data['charges']

categorical_cols = ['sex', 'smoker', 'region']
numerical_cols = ['age', 'bmi', 'children']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_cols),
        ('cat', OneHotEncoder(), categorical_cols)
    ]
)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, root_mean_squared_error

model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

model_pipeline.fit(X_train, y_train)

y_pred = model_pipeline.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = root_mean_squared_error(y_test, y_pred)

print("Mean Absolute Error (MAE):", mae)
print("Root Mean Squared Error (RMSE):", rmse)

"""# New Section"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error

model_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

model_pipeline.fit(X_train, y_train)

y_pred = model_pipeline.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred)

print("Mean Absolute Error (MAE):", mae)
print("Root Mean Squared Error (RMSE):", rmse)

import numpy as np
from xgboost import XGBRegressor
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer

numeric_features = ['age', 'bmi', 'children']
categorical_features = ['sex', 'smoker', 'region']

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ]
)

X_processed = preprocessor.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)

model = XGBRegressor(objective='reg:squarederror', random_state=42, tree_method='hist', device='cuda', enable_categorical=True)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("Test Set MAE:", mae)
print("Test Set RMSE:", rmse)

print("\nEnter details to predict Health Insurance Premium:")

def get_user_input():
    input_data = {}

    try:
        input_data["age"] = float(input("Enter your age: "))
        input_data["bmi"] = float(input("Enter your Body Mass Index (BMI): "))
        input_data["children"] = int(input("Enter the number of children you have: "))
    except ValueError:
        print("Invalid input. Please enter numeric values where required.")
        return get_user_input()


    input_data["sex"] = input("Enter your gender (male/female): ").strip().lower()
    input_data["smoker"] = input("Do you smoke? (yes/no): ").strip().lower()
    input_data["region"] = input("Enter your region (e.g., northwest, southwest, northeast, southeast): ").strip().lower()

    return input_data

input_data = get_user_input()

user_input_df = pd.DataFrame([input_data])

processed_input = preprocessor.transform(user_input_df)

prediction = model.predict(processed_input)

print("\nPredicted Health Insurance Premium: ", round(prediction[0], 2))

